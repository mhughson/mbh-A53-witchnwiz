#!/usr/bin/python3

import sys
import json
import os
import subprocess

#try:
#    sys.argv[1]
#except (IndexError, NameError):
#	print ("\n!!ERROR: expected json filename of map as an argument!!")
    #todo: go back to input once work flow is established.
#	jsonmap_filename = "small_map.json" # input("Enter name of map file now: ")
#else:	
#	jsonmap_filename = sys.argv[1]

#jsonmap_file = open(jsonmap_filename, 'r')
#jsonmap_data = json.load(jsonmap_file)
#print(jsonmap_data["editorsettings"]["export"]["format"])

#mapname = os.path.basename(jsonmap_filename)
#mapname = os.path.splitext(mapname)[0]

# required for when this is run from visual studio, where Working directory will be /game/ not /game/MAPS/
#os.chdir("GAME/MAPS/")
os.chdir("MAPS/")
print("CWD: " + os.getcwd())

newfile = open('../maps.h', 'w')  # warning, this will overwrite old file !!!!!!!!!!!!!!!!!!!!!

newfile.write("// auto-generated by generate_maps_header.py\n")

num_rooms = 0
room_name_list = [ ]

#shipping list
room_type_order = [ 
    "map_zone_blocks", 
    "map_zone_clone", 
    "map_zone_team", 
]

#all maps. (comment out to switch to filter list above)
#room_type_order = [ "map_" ]

#first export all the maps.
files = [f for f in os.listdir('.') if os.path.isfile(f) and f.endswith(".tmx") and f.startswith(tuple(room_type_order))]

for f in files:
    mapname = os.path.basename(f)
    mapname = os.path.splitext(mapname)[0]
    #TODO: Check time stamps before running to speed this up. It is very slow.
    subprocess.check_call([r"C:\\Program Files\\Tiled\\tiled.exe", "--export-map", f, mapname + ".json"])


files = [f for f in os.listdir('.') if os.path.isfile(f) and f.endswith(".json") and f.startswith(tuple(room_type_order))]

for f in files:
    print("processing: " + f)

    num_rooms += 1

    jsonmap_file = open(f, 'r')
    jsonmap_data = json.load(jsonmap_file)

    mapname = os.path.basename(f)
    mapname = os.path.splitext(mapname)[0]

    room_name_list.append(mapname)
    
    layers = jsonmap_data["layers"]

    # First count how many dynamic objects are on the map.
    layer = layers[2]
    counter = 0
    for d in layer["data"]:
        if d > 0:
            # index and tile id
            counter += 2

    # The map array will be 240 for the BG + the index and tile id for each
    # dynamic object. The extra +2 is for ending characters 0xff,0xff.
    # +2 more for palette overrides.
    newfile.write("const unsigned char " + mapname + "[" + str(240 + counter + 2 + 2) + "] = \n{\n")

    # TODO: This has a pretty nasty assumption that properties come in order, and have either 100%
    # defined, or none.
    if "properties" in jsonmap_data:
        for prop in jsonmap_data["properties"]:
            if prop["name"] == "BG_Palette_Override":
                newfile.write("\n//BG PAL:\n"  + str(prop["value"]) + ",\n")
            elif prop["name"] == "SPR_Palette_Override":
                newfile.write("\n//SPR PAL:\n"  + str(prop["value"]) + ",\n")
    else:
        newfile.write("\n//BG PAL:\n0,\n")
        newfile.write("\n//SPR PAL:\n0,\n")
    
    # BG Layer.
    layer = layers[1] 
    
    counter = 0
    # assumes order of layers is background, then dynamics.
    if layer["type"] == "tilelayer":
        newfile.write("\n//Background:\n")
        for d in layer["data"]:
            display = str(d - 1)
            display = display.rjust(2, " ")
            newfile.write(display + ", ")
            counter+=1
            if counter == 16:
                newfile.write("\n")
                counter = 0   

    newfile.write("\n//Dynamics:\n")
    counter = 0
    # Dynamics layer
    layer = layers[2] 
    for d in layer["data"]:
        if d > 0:
            # index, id
            newfile.write(str(counter) + ", " + str(d - 1) + ", ")
        counter += 1
    # Signals the end of the Dynamics data.
    newfile.write("0xff, 0xff \n};\n\n")
	
# delete that last comma, back it up	
#z = newfile.tell()
#z = z - 3
#newfile.seek(z)

newfile.write("const unsigned char (*rooms[NUM_ROOMS]) =\n{\n")

for room in room_name_list:
    newfile.write(room + ",\n")

newfile.write("};")

newfile.close


newfile = open('../map_defs.h', 'w')  # warning, this will overwrite old file !!!!!!!!!!!!!!!!!!!!!

newfile.write("// auto-generated by generate_maps_header.py\n")

newfile.write("#ifndef BCF202CC_2317_4F36_8DD6_9F5039E154C6\n#define BCF202CC_2317_4F36_8DD6_9F5039E154C6\n\n")

newfile.write("#define NUM_ROOMS " + str(num_rooms) + "\n")

newfile.write("\n#endif /* BCF202CC_2317_4F36_8DD6_9F5039E154C6 */\n")
newfile.close

print("\n**GENERATE MAPS HEADER COMPLETE**\n")